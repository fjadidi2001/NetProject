{"ast":null,"code":"import { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR, CLEAR_CONTACTS } from '../types';\nconst contactReducer = (state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts]\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact)\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload)\n      };\n    case CLEAR_CONTACTS:\n      return {\n        ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter(_ref => {\n          let {\n            name,\n            email\n          } = _ref;\n          const testString = `${name}${email}`.toLowerCase();\n          return testString.includes(action.payload.toLowerCase());\n        })\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      throw new Error(`Unsupported type of: ${action.type}`);\n  }\n};\nexport default contactReducer;","map":{"version":3,"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","CLEAR_CONTACTS","contactReducer","state","action","type","contacts","payload","map","contact","_id","filter","filtered","error","current","name","email","testString","toLowerCase","includes","Error"],"sources":["/home/jadidi/Desktop/term7/html/contactSave/NetProject/client/src/context/contact/contactReducer.js"],"sourcesContent":["import {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n  CLEAR_CONTACTS\n} from '../types';\n\nconst contactReducer = (state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts]\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact._id === action.payload._id ? action.payload : contact\n        )\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact._id !== action.payload\n        )\n      };\n    case CLEAR_CONTACTS:\n      return {\n        ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter(({ name, email }) => {\n          const testString = `${name}${email}`.toLowerCase();\n          return testString.includes(action.payload.toLowerCase());\n        })\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      throw new Error(`Unsupported type of: ${action.type}`);\n  }\n};\n\nexport default contactReducer;\n"],"mappings":"AAAA,SACEA,YAAY,EACZC,WAAW,EACXC,cAAc,EACdC,WAAW,EACXC,aAAa,EACbC,cAAc,EACdC,eAAe,EACfC,YAAY,EACZC,aAAa,EACbC,cAAc,QACT,UAAU;AAEjB,MAAMC,cAAc,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACxC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKb,YAAY;MACf,OAAO;QACL,GAAGW,KAAK;QACRG,QAAQ,EAAEF,MAAM,CAACG;MACnB,CAAC;IACH,KAAKd,WAAW;MACd,OAAO;QACL,GAAGU,KAAK;QACRG,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAO,EAAE,GAAGJ,KAAK,CAACG,QAAQ;MAC9C,CAAC;IACH,KAAKT,cAAc;MACjB,OAAO;QACL,GAAGM,KAAK;QACRG,QAAQ,EAAEH,KAAK,CAACG,QAAQ,CAACE,GAAG,CAAEC,OAAO,IACnCA,OAAO,CAACC,GAAG,KAAKN,MAAM,CAACG,OAAO,CAACG,GAAG,GAAGN,MAAM,CAACG,OAAO,GAAGE,OAAO;MAEjE,CAAC;IACH,KAAKf,cAAc;MACjB,OAAO;QACL,GAAGS,KAAK;QACRG,QAAQ,EAAEH,KAAK,CAACG,QAAQ,CAACK,MAAM,CAC5BF,OAAO,IAAKA,OAAO,CAACC,GAAG,KAAKN,MAAM,CAACG,OAAO;MAE/C,CAAC;IACH,KAAKN,cAAc;MACjB,OAAO;QACL,GAAGE,KAAK;QACRG,QAAQ,EAAE,IAAI;QACdM,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE,IAAI;QACXC,OAAO,EAAE;MACX,CAAC;IACH,KAAKnB,WAAW;MACd,OAAO;QACL,GAAGQ,KAAK;QACRW,OAAO,EAAEV,MAAM,CAACG;MAClB,CAAC;IACH,KAAKX,aAAa;MAChB,OAAO;QACL,GAAGO,KAAK;QACRW,OAAO,EAAE;MACX,CAAC;IACH,KAAKhB,eAAe;MAClB,OAAO;QACL,GAAGK,KAAK;QACRS,QAAQ,EAAET,KAAK,CAACG,QAAQ,CAACK,MAAM,CAAC,QAAqB;UAAA,IAApB;YAAEI,IAAI;YAAEC;UAAM,CAAC;UAC9C,MAAMC,UAAU,GAAI,GAAEF,IAAK,GAAEC,KAAM,EAAC,CAACE,WAAW,EAAE;UAClD,OAAOD,UAAU,CAACE,QAAQ,CAACf,MAAM,CAACG,OAAO,CAACW,WAAW,EAAE,CAAC;QAC1D,CAAC;MACH,CAAC;IACH,KAAKnB,YAAY;MACf,OAAO;QACL,GAAGI,KAAK;QACRS,QAAQ,EAAE;MACZ,CAAC;IACH,KAAKZ,aAAa;MAChB,OAAO;QACL,GAAGG,KAAK;QACRU,KAAK,EAAET,MAAM,CAACG;MAChB,CAAC;IACH;MACE,MAAM,IAAIa,KAAK,CAAE,wBAAuBhB,MAAM,CAACC,IAAK,EAAC,CAAC;EAAC;AAE7D,CAAC;AAED,eAAeH,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}